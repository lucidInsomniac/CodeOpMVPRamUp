Bug tracking:
    Jira

Software:

CSS:   
    Pure CSS
    //Material UI for icons

Client-Routing:
    React-Router

    
==============================================

Left to do:

    MYSQL: create the the 2 tables: 
            Inventory (parent)
            Orders (child) 
            Update MYSQL notes 

            ADD Delete for API
            Figure out commands for UPDATE
            Condition: Same as GET but target partial and full column
            Test and document errors

    Add event handlers for: Order 
            Form 
            App
            Add React-router
            Test data passes through each component

===========================================================================


REACT Router: if route matches url path, it renders

<Route path ="/about">
    <AboutView /> 
</Route>

if multiple: goes in sequential order

use Switch

<Switch>
    <Route path="/"exact>
        <HomeView />
    </Route>

    <Route path="/about">
        <AboutView />
    </Route>

    <Error404View />
</Switch>



Nav:

<nav> 
    <ul>
        <li> <NavLink to ="/" activeClassName="selected"> Home </NavLink></li>
        


Sample

in index.js for Client


ReactDom.render(
    <React.StrictMode>
        <BrowserRouter>
            <App />
        </BrowserRouter>
    </React.StrictMode>
)


in App.js

<h1> React App</h1>

<NavBar/>
<Routes>



in Routes.js: each page has a separate js file

function Routes(props) {
    return(
        <Swtich>

            <Route path="/"exact>
                <HomeView />
            </Route>

            <Route path="/about" >
                <AboutView  userCount={ props.users.length/>
            </Rotue>

        </Switch>
in Navbar.js



import { Link } from 'react-router-dom'

function Navbar ( {
    return (
        <nav className="Navbar">
            <ul>
                <li></li>

            </ul>
        </nav>
    )
})

========================================================


import React from 'react'


export default function Datatable ( { data }) {   //this would be props for the component
    //check data
    console.log('Table', data)
    //pulls column name as keys from DB and displays it
    // const columns= data.[0] && Object.keys(data[0])

    return (
        <table cellPadding={0} cellSpacing={0}>

            <thead>
                {/* can dynamically add data into table.
                Start with guard clause in case no data inserted .
                You need to define columns as a separate entity as const*/}

                {/* <tr>{ data[0] && columns.map( (heading) => <th>{ heading }</th>)} </tr> */}
            </thead>


            <tbody>
                {/* map data inside body, it goes over each column using map func*/}
              {/* { data.map( (row) => (
                <tr> 
                    {  
                        // we pass row and incl column prop to access data in that cell
                      columns.map( (column) =>  (
                        <td>{row[column]}</td>
                      ))}

                </tr>
              ))} */}

            </tbody>

        </table>
    )
}